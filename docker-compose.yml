# meu-ecommerce-monorepo/docker-compose.yml

version: '3.8'

services:
  #####################################
  # BANCO DE DADOS DO SERVIÇO DE CATÁLOGO E PAGAMENTOS
  #####################################
  postgres-db:
    image: postgres:15-alpine
    container_name: postgres-db-ecommerce
    ports:
      - "${POSTGRES_PORT}:5432"
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - ecommerce-network

  #####################################
  # CACHE DO SERVIÇO DE CARRINHO
  #####################################
  redis-cache:
    image: redis:7-alpine
    container_name: redis-cache-ecommerce
    ports:
      - "${REDIS_PORT}:6379"
    networks:
      - ecommerce-network

  #####################################
  # MESSAGE BROKER PARA EVENTOS
  #####################################
  rabbitmq:
    image: rabbitmq:3.13-management-alpine
    container_name: rabbitmq-ecommerce
    ports:
      - "${RABBITMQ_PORT}:5672"       # Porta para a aplicação se conectar
      - "${RABBITMQ_MANAGE_PORT}:15672" # Porta para a interface de gerenciamento web
    networks:
      - ecommerce-network

  product-catalog-service:
    build:
      context: ./apps/product-catalog-service
    container_name: product-catalog-service
    ports:
      - "3000:3000"
    command: pnpm run start:dev
    volumes:
      - ./apps/product-catalog-service:/app
      - /app/node_modules
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres-db:5432/${POSTGRES_DB}
      - RABBITMQ_URL=amqp://rabbitmq
    depends_on:
      - postgres-db
      - rabbitmq
    networks:
      - ecommerce-network
  
  shopping-cart-service:
    build:
      context: ./apps/shopping-cart-service # 1. Aponta para a pasta do novo serviço
    container_name: shopping-cart-service
    command: pnpm run start:dev               # 2. Inicia em modo de desenvolvimento
    ports:
    - "3001:3000"                         # 3. Expõe na porta 3001 para não conflitar
    volumes:
      - ./apps/shopping-cart-service:/app   # 4. Mapeia os arquivos para o hot-reload
      - /app/node_modules
    environment:
      - REDIS_URL=redis://redis-cache:6379  # 5. Variável de ambiente para conectar ao Redis
    depends_on:
      - redis-cache                         # 6. Garante que o Redis inicie antes
    networks:
      - ecommerce-network

  #####################################
  # MICROSSERVIÇO DE PROCESSAMENTO DE PAGAMENTOS
  #####################################
  payment-service:
    build:
      context: ./apps/payment-service
    container_name: payment-service
    command: pnpm run start:dev
    ports:
      - "3002:3000" # Expondo na porta 3002
    volumes:
      - ./apps/payment-service:/app
      - /app/node_modules
    environment:
      # Reutilizando o mesmo banco de dados, mas poderia ser outro
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres-db:5432/${POSTGRES_DB}
      - RABBITMQ_URL=amqp://rabbitmq # URL para conectar ao RabbitMQ
    depends_on:
      - postgres-db
      - rabbitmq
    networks:
      - ecommerce-network

volumes:
  postgres_data:
    driver: local

networks:
  ecommerce-network:
    driver: bridge